type='l',
fcol="red",
col='blue',
main="Forecast, 1 hour ahead")
?plot
6000-24
str(Y1)
training_time = time[5976:6001]
temp = c(training_set$HC.f[5976:6000], Y1$mean)
plot(temp~training_time)
plot(temp~training_time, type="l")
training_time = time[5954:6001]
temp = c(training_set$HC.f[5954:6000], Y1$mean)
plot(temp~training_time, type="l")
training_time = time[5976:6001]
temp = c(training_set$HC.f[5976:6000], Y1$mean)
plot(temp~training_time, type="l")
?lines
?fan
?predict
?lines
Y1$lower
Y1$lower[1,17]
training_time = time[5976:6001]
temp = c(training_set$HC.f[5976:6000], Y1$mean)
plot(temp~training_time, type="l")
lines(time[6001],Y1$lower[1,16])
dev.off()
plot(temp~training_time, type="l")
lines(time[6000:6001],training_set[6000]:Y1$lower[1,16])
lines(time[6000:6001],training_set$HC.f[6000]:Y1$lower[1,16])
length(time[6000:6001])
length(training_set$HC.f[6000]:Y1$lower[1,16])
length(Y1$lower[1,16])
length(training_set$HC.f[6000])
lines(time[6000:6001],c(training_set$HC.f[6000],Y1$lower[1,16]))
plot(temp~training_time, type="l")
lines(time[6000:6001],c(training_set$HC.f[6000],Y1$lower[1,16]))
?lines
dev.off()
training_time = time[5976:6000]
temp = c(training_set$HC.f[5976:6000])
plot(temp~training_time, type="l")
lines(Y1)
lines(Y1,y=NULL)
plot(temp~training_time, type="l")
par(new=TRUE)
plot.forecast(Y1,
include=0,
type='l',
fcol="red",
col='blue',
main="Forecast, 1 hour ahead")
plot.forecast
?plot.forecast
dev.off()
plot(temp~training_time, type="l")
par(new=TRUE)
plot.forecast(Y1,
include=0,
type='l',
fcol="red",
ylab=NULL,
col='blue',
main="Forecast, 1 hour ahead")
dev.off()
plot(temp~training_time, type="l")
training_time = time[5976:6001]
plot(temp~training_time, type="l")
dev.off()
training_time = time[5976:6000]
temp = c(training_set$HC.f[5976:6000])
time(1)
time[1]
time[8782]
time[8783]
training_set[6000]
training_set[5999]
training_set$time[6000]
training_set$time[5999]
time[6000]
plot(temp~training_time, type="l")
data$HC.f[5976]
data$time[5976]
time[5976]
data$HC.f[5976:6000]
time[5976:6000]
training_time = time[5976:6001]
temp = c(training_set$HC.f[5976:6000],Y1$mean)
plot(temp~training_time, type="l")
?lot
?plot
lines(time[6000:6001],c(training_set$HC.f[6000],Y1$lower[1,16]))
lines(time[6000:6001],c(training_set$HC.f[6000],Y1$upper[1,16]))
str(Y1)
Y1$upper
Y1$lower
?plot
dev.off()
training_time = time[5976:6000]
temp = c(training_set$HC.f[5976:6000])
plot(temp~training_time, type="l")
par(new=TRUE)
plot.forecast(Y1,
include=0,
type='l',
fcol="red",
ylab=NULL, xlab=NULL
col='blue',
main="Forecast, 1 hour ahead")
plot.forecast(Y1,
include=0,
type='l',
fcol="red",
ylab=NULL,
xlab=NULL,
col='blue',
main="Forecast, 1 hour ahead")
plot.forecast(Y1,
include=24,
type='l',
fcol="red",
ylab=NULL,
xlab=NULL,
col='blue',
main="Forecast, 1 hour ahead")
lines(c(training_set$HC.f, test_set$HC.f[1]))
?plot.forecast
?ggplot
require(Y1)
dev.off()
plot(temp~training_time, type="l")
par(new=TRUE)
plot(Y1)
dev.off()
plot(Y1,inclued=24)
plot.forecast(Y1,
plot(Y1,inclued=24)
plot.forecast(Y1,
dev.off()
plot.forecast(Y1,
include=24,
type='l',
fcol="red",
ylab=NULL,
xlab=NULL,
col='blue',
main="Forecast, 1 hour ahead")
lines(c(training_set$HC.f, test_set$HC.f[1]))
training_time = time[5976:6001]
temp = c(training_set$HC.f[5976:6000],test_set$HC.f[6001])
plot(temp~training_time, type="l")
par(new=TRUE)
plot.forecast(Y1,
include=0,
type='l',
fcol="red",
ylab=NULL,
xlab=NULL,
col='blue',
main="Forecast, 1 hour ahead")
lines(c(training_set$HC.f, test_set$HC.f[1]))
dev.off()
training_time = time[5976:6001]
temp = c(training_set$HC.f[5976:6000],test_set$HC.f[6001])
plot(temp~training_time, type="l")
plot.forecast(Y1,
include=0,
type='l',
fcol="red",
ylab=NULL,
xlab=NULL,
col='blue',
main="Forecast, 1 hour ahead")
plot.forecast(Y1,
include=24,
type='l',
fcol="red",
ylab=NULL,
xlab=NULL,
col='blue',
main="Forecast, 1 hour ahead")
lines(c(training_set$HC.f, test_set$HC.f[1]))
str(Y1)
plot.forecast
plot.conf(Y1)
up <- as.matrix(Y1$upper)
up
?ts
365*24
?monthplot
?ts
time[1]
data = read.csv("veks.csv")
time = as.POSIXct("1960-1-1") + (data$jdate*24 + data$hh) *3600
#Consider the time series of heat consumption.
par(mfrow=c(2,1))
plot(data$HC.f ~time,
type='l',
main='Original Heat consumption(GJ/h) data ',
xlab="running time",
ylab="Heat consumption [GJ/h]",
col="red")
grid()
plot(diff(data$HC.f, difference=1) ~time[2:length(time)],
type='l',
main='Differenced Heat consumption(GJ/h) data ',
xlab="running time",
ylab="Heat consumption [GJ/h]",
col="red")
grid()
WD = NULL
for(i in 1:length(data$ds.dow)){
if(data$ds.tod[i] == 1){
WD[i] = 0
}
else{
WD[i] = 1
}
}
data$ext_reggressors <- cbind(WD,Ta.f,GR.f,W.f)
data.ts <- ts(data$HC.f,frequency =8760,start = c(1995,7))
training_set = subset(data, data$row.names <= 6000)
test_set = subset(data,data$row.names > 6000)
time_training = time[1:6000]
time_test = time[6001:length(time)]
dev.off()
par(mfrow = c(2,2))
acf(diff(data$HC.f, difference=1))
pacf(diff(data$HC.f, difference=1))
acf(diff(data$HC.f, difference=1), type="covariance")
#Estimate the spectrum for the variations of the heat consumption.
spectrum(diff(data$HC.f, difference=1),
method = "ar")
par(mfrow = c(2,1))
acf(diff(data$HC.f, difference=1), lag.max=300)
pacf(diff(data$HC.f, difference=1), lag.max=300)
dev.off()
data[6001]
data[6001,]
time[6001]
time[1]
time[8782]
?ts
setwd("~/Documents/GitHub/HRTimeSeries-project2")
require("forecast")
data = read.csv("veks.csv")
data$HC.f = ts(data$HC.f,frequency = 24)
data$Ta.f = ts(data$Ta.f, frequency = 24)
data$W.f = ts(data$W.f, frequency = 24)
data$GR.f = ts(data$GR.f, frequency =24)
time = as.POSIXct("1960-1-1") + (data$jdate*24 + data$hh) *3600
par(mfrow=c(2,1))
plot(data$HC.f ~time,
type='l',
main='Original Heat consumption(GJ/h) data ',
xlab="running time",
ylab="Heat consumption [GJ/h]",
col="red")
plot(data$HC.f ~time,
type='l',
main='Original Heat consumption(GJ/h) data ',
xlab="running time",
ylab="Heat consumption [GJ/h]",
col="red")
?plot
?plot.ts
plot.ts(data$HC.f ~time,
type='l',
main='Original Heat consumption(GJ/h) data ',
xlab="running time",
ylab="Heat consumption [GJ/h]",
col="red")
?ts
data$HC.f = ts(data$HC.f,frequency = 24)
data$Ta.f = ts(data$Ta.f, frequency = 24)
data$W.f = ts(data$W.f, frequency = 24)
data$GR.f = ts(data$GR.f, frequency =24)
time = as.POSIXct("1960-1-1") + (data$jdate*24 + data$hh) *3600
#Consider the time series of heat consumption.
par(mfrow=c(2,1))
plot(data$HC.f ~time,
type='l',
main='Original Heat consumption(GJ/h) data ',
xlab="running time",
ylab="Heat consumption [GJ/h]",
col="red")
plot.ts(data$HC.f ~time,
type='l',
main='Original Heat consumption(GJ/h) data ',
xlab="running time",
ylab="Heat consumption [GJ/h]",
col="red")
?plot.ts
data = read.csv("veks.csv")
data$HC.f = ts(data$HC.f,frequency = 24, start = c(1995,((data$ds.diy[1]*24)+data$ds.hh[1])))
data$Ta.f = ts(data$Ta.f, frequency = 24, start =c( 1995,((data$ds.diy[1]*24)+data$ds.hh[1])))
data$W.f = ts(data$W.f, frequency = 24, start = c(1995,((data$ds.diy[1]*24)+data$ds.hh[1])))
data$GR.f = ts(data$GR.f, frequency =24, start = c(1995,((data$ds.diy[1]*24)+data$ds.hh[1])))
time = as.POSIXct("1960-1-1") + (data$jdate*24 + data$hh) *3600
par(mfrow=c(2,1))
plot(data$HC.f ~time,
type='l',
main='Original Heat consumption(GJ/h) data ',
xlab="running time",
ylab="Heat consumption [GJ/h]",
col="red")
plot.ts(data$HC.f ~time,
type='l',
main='Original Heat consumption(GJ/h) data ',
xlab="running time",
ylab="Heat consumption [GJ/h]",
col="red")
plot.ts(data$HC.f
type='l',
main='Original Heat consumption(GJ/h) data ',
xlab="running time",
ylab="Heat consumption [GJ/h]",
plot.ts(data$HC.f ,
type='l',
main='Original Heat consumption(GJ/h) data ',
xlab="running time",
ylab="Heat consumption [GJ/h]",
col="red")
grid()
plot(diff(data$HC.f, difference=1) ~time[2:length(time)],
type='l',
main='Differenced Heat consumption(GJ/h) data ',
xlab="running time",
ylab="Heat consumption [GJ/h]",
col="red")
plot.ts(diff(data$HC.f, difference=1) ,
type='l',
main='Differenced Heat consumption(GJ/h) data ',
xlab="running time",
ylab="Heat consumption [GJ/h]",
col="red")
grid()
WD = NULL
for(i in 1:length(data$ds.dow)){
if(data$ds.tod[i] == 1){
WD[i] = 0
}
else{
WD[i] = 1
}
}
data$ext_regressors <- cbind(WD=data$WD,Ta.f=data$Ta.f,GR.f=data$GR.f,W.f=data$W.f)
training_set = subset(data, data$row.names <= 6000)
test_set = subset(data,data$row.names > 6000)
time_training = time[1:6000]
time_test = time[6001:length(time)]
dev.off()
par(mfrow = c(2,2))
acf(diff(data$HC.f, difference=1))
pacf(diff(data$HC.f, difference=1))
acf(diff(data$HC.f, difference=1), type="covariance")
#Estimate the spectrum for the variations of the heat consumption.
spectrum(diff(data$HC.f, difference=1),
method = "ar")
par(mfrow = c(2,1))
acf(diff(data$HC.f, difference=1), lag.max=300)
pacf(diff(data$HC.f, difference=1), lag.max=300)
dev.off()
fit3 = Arima(training_set$HC.f,
order=c(2,1,1),
seasonal = list(order = c(1,0,1), period = 24),
xreg = training_set$ext_regressors[,1] #working days regressor
)
acf(fit3$residuals)
fit3
dev.off()
par(mfrow = c(2,1))
forecast_1ahead = forecast.Arima(fit3,fan=TRUE, h=1, xreg= test_set$ext_regressors[1,1])
plot.forecast(forecast_1ahead,
include=24,
type='l',
fcol="red",
col='blue',
main="Forecast, 1 hour ahead")
lines(c(training_set$HC.f, test_set$HC.f[1]))
forecast_6ahead= forecast.Arima(fit3,fan=TRUE, h=6, xreg= test_set$ext_regressors[1:6,1])
plot.forecast(forecast_6ahead,
include=24,
type='l',
fcol="red",
col='blue',
main="Forecast, 6 hour ahead")
lines(c(training_set$HC.f, test_set$HC.f[1:6]))
dev.off()
plot.forecast(forecast_1ahead,
include=24,
type='l',
fcol="red",
col='blue',
main="Forecast, 1 hour ahead")
lines(c(training_set$HC.f, test_set$HC.f[1]))
data = read.csv("veks.csv")
data$HC.f = ts(data$HC.f,frequency = 24, start = c(1995,((data$ds.diy[1]*24)+data$ds.hh[1])))
data$Ta.f = ts(data$Ta.f, frequency = 24, start =c( 1995,((data$ds.diy[1]*24)+data$ds.hh[1])))
data$W.f = ts(data$W.f, frequency = 24, start = c(1995,((data$ds.diy[1]*24)+data$ds.hh[1])))
data$GR.f = ts(data$GR.f, frequency =24, start = c(1995,((data$ds.diy[1]*24)+data$ds.hh[1])))
time = as.POSIXct("1960-1-1") + (data$jdate*24 + data$hh) *3600
#Consider the time series of heat consumption.
par(mfrow=c(2,1))
plot.ts(data$HC.f ,
type='l',
main='Original Heat consumption(GJ/h) data ',
xlab="running time",
ylab="Heat consumption [GJ/h]",
col="red")
grid()
#Comment: we can see that the data set is nonstationary. Thus, we difference the series.
plot.ts(diff(data$HC.f, difference=1) ,
type='l',
main='Differenced Heat consumption(GJ/h) data ',
xlab="running time",
ylab="Heat consumption [GJ/h]",
col="red")
grid()
WD = NULL
for(i in 1:length(data$ds.dow)){
if(data$ds.tod[i] == 1){
WD[i] = 0
}
else{
WD[i] = 1
}
}
data$ext_regressors <- cbind(WD=data$WD,Ta.f=data$Ta.f,GR.f=data$GR.f,W.f=data$W.f)
training_set = subset(data, data$row.names <= 6000)
test_set = subset(data,data$row.names > 6000)
time_training = time[1:6000]
time_test = time[6001:length(time)]
#Estimate the autocovariance, autocorrelation and partial autocorrelation
#functions for the heat consumption.
dev.off()
par(mfrow = c(2,2))
acf(diff(data$HC.f, difference=1))
pacf(diff(data$HC.f, difference=1))
acf(diff(data$HC.f, difference=1), type="covariance")
#Estimate the spectrum for the variations of the heat consumption.
spectrum(diff(data$HC.f, difference=1),
method = "ar")
par(mfrow = c(2,1))
acf(diff(data$HC.f, difference=1), lag.max=300)
pacf(diff(data$HC.f, difference=1), lag.max=300)
dev.off()
fit3 = Arima(training_set$HC.f,
order=c(2,1,1),
seasonal = list(order = c(1,0,1), period = 24),
xreg = training_set$ext_regressors[,1] #working days regressor
)
acf(fit3$residuals)
fit3
dev.off()
par(mfrow = c(2,1))
forecast_1ahead = forecast.Arima(fit3,fan=TRUE, h=1, xreg= test_set$ext_regressors[1,1])
plot.forecast(forecast_1ahead,
include=24,
type='l',
fcol="red",
col='blue',
main="Forecast, 1 hour ahead")
lines(c(training_set$HC.f, test_set$HC.f[1]))
forecast_6ahead= forecast.Arima(fit3,fan=TRUE, h=6, xreg= test_set$ext_regressors[1:6,1])
plot.forecast(forecast_6ahead,
include=24,
type='l',
fcol="red",
col='blue',
main="Forecast, 6 hour ahead")
lines(c(training_set$HC.f, test_set$HC.f[1:6]))
#------------------------Task 3 (15%)----------------------------------------
dev.off()
plot(data$Ta.f ~time,
main="Ambient air temperature data",
type='l',
ylab='Centigrade',
col='red')
plot.ts(data$Ta.f,
main="Ambient air temperature data",
type='l',
ylab='Centigrade',
col='red')
grid()
plot(diff(data$Ta.f,difference=1)
~time[2:length(data$Ta.f)],
main="Ambient air temperature data (first difference)",
type='l',
ylab='Centigrade',
col='red')
plot.ts(diff(data$Ta.f,difference=1),
main="Ambient air temperature data (first difference)",
type='l',
ylab='Centigrade',
col='red')
grid()
dev.off()
ccf(diff(data$HC.f,difference=1),diff(data$Ta.f,difference=1),
main="cross correlation, HC vs amb temp",
col='red')
ambTemp_filtered <- arima(training_set$Ta.f,model=fit3)
?arima
?Arima
ambTemp_filtered <- Arima(training_set$Ta.f,model=fit3)
ambTemp_filtered <- Arima(training_set$Ta.f,model=fit3, fixed = c(NA,NA,NA,NA,NA))
ambTemp_filtered <- Arima(x=training_set$Ta.f,model=fit3, fixed = c(NA,NA,NA,NA,NA))
ambTemp_filtered <- Arima(training_set$Ta.f,model=fit3, fixed = c(NA,NA,NA,NA,NA,NA))
ambTemp_filtered <- Arima(training_set$Ta.f,model=fit3, fixed = c(NA,NA,NA,NA))
ambTemp_filtered <- Arima(training_set$Ta.f)#,model=fit3, fixed = c(NA,NA,NA,NA,NA))
ccf(fit3$residuals, residuals(ambTemp_filtered), na.action=na.omit)
